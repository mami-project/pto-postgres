# Swagger YAML definition of the PTO API
swagger: '2.0'

info:
  version: "0.3.0"
  title: MAMI Path Transparency Observatory API (PAPI)
  description: API for uploading files to the observatory, managing uploaded files, invoking and managing analysis of raw measurement data and observations, reviewing and managing observation sets, and running and caching queries on the resulting observations.

schemes:
  - https

parameters:
  Permissions:
    name: permissions
    in: query
    type: string
    required: true
    description: |
      A string containing the permission characters for this API key. The following characters are supported:
      - `r` submit raw data file
      - `R` manage raw data files
      - `q` submit queries
      - `Q` manage query queue and workers
      - `S` manage observation sets
      - `a` invoke analyses and observe running analyses
      - `A` manage analysis queue and workers
      - `X` manage access control  
  
responses:
  KeyDescription:
    description: Key updated, details returned.
    schema:
        title: KeyDescription
        type: object
        properties:
          key: 
            type: string
            description: Newly created API key
          name:
            type: string
            description: Display name for the API key
          expires:
            type: string
            description: Expiration date for the API key in ISO8601/RFC3339 format. 


paths:

  #
  # create a key
  #
  /api-key/create:
    get:
      description: Create a new API key. *new in PAPI 0.3*
      produces: 
        -
          application/json
      parameters:
        -
          name: key
          in: query
          type: string
          required: true
          description: API key with `X` permission
        -
          name: name
          in: query
          type: string
          required: true
          description: Display name for the API key
        -
          name: expires
          in: query
          type: string
          required: false
          description: Expiration date for the API key in ISO8601/RFC3339 format. If not present, expiration date will be set thirty days in the future.
        -
          $ref: '#/parameters/Permissions'
      responses:
        200:
          $ref: '#/responses/KeyDescription'
        401:
          description: API key not valid, expired, or does not have `X` permission

  #
  # revoke a key
  #
  /api-key/revoke:
    get:
      description: Revoke an API key by clearning all its permissions. *changed in PAPI 0.3*
      parameters:
        -
          name: key
          in: query
          type: string
          required: true
          description: API key to revoke. All keys have implicit permission to self-revoke.
      responses:
        200: 
          description: Key revoked.
        401:
          description: API key not valid or expired.
  
  #
  # renew/edit a key
  #
  /api-key/renew:
    get:
      description: Edit an existing API key. *new in PAPI 0.3*
      parameters:
        -
          name: key
          in: query
          type: string
          required: true
          description: API key with `X` permission
        -
          name: subject
          in: query
          type: string
          required: true
          description: API key to renew
        -
          name: name
          in: query
          type: string
          required: false
          description: If present, new display name for the API key
        -
          name: expires
          in: query
          type: string
          required: false
          description: If present, expiration date for the API key in ISO8601/RFC3339 format.
        -
          $ref: '#/parameters/Permissions'
      responses:
        200:
          $ref: '#/responses/KeyDescription'
        401:
          description: API key not valid, expired, or does not have `X` permission

  #
  # grant raw download access to a campaign to an API key
  #
  /api-key/grant-campaign:
    get:
      produces: 
        - 
          application/json
      parameters:
        -
          name: key
          in: query
          type: string
          required: true
          description: API key with `X` permission
        -
          name: subject
          in: query
          type: string
          required: true
          description: API key to grant permission to
        -
          name: campaign
          in: query
          type: string
          required: true
          description: Name of campaign to grant raw data access to
      responses:
        200: 
          description: Permission granted.
        401:
          description: API key not valid or expired.
        404:
          description: Campaign or subject key not found.

  #
  # upload a raw data file
  # FIXME: split this into metadata upload + PUT: 
  # see https://philsturgeon.uk/api/2016/01/04/http-rest-api-file-uploads/
  # metadata upload results in 201 Created with a Location to PUT the file data.
  # 
  /raw/upload:
    post:
      responses:
        201: 
          description: File created on filesystem; upload data using PUT to the Location in the response header.
  
  #
  # list campaigns and show statistics per campaign
  #
  /raw/campaigns:
    get:

  #
  # list files in a campaign
  #
  /raw/files:
    get:
  
  #
  # download a raw data file
  #
  /raw/download:
    get:
  
  #
  # submit a query to the queue
  #
  /query/submit:
    post:

  #
  # retrieve query results given a query ID 
  #
  /query/result:
    get:
  
  #
  # list pending queries in the query queue
  #
  /query/pending:
    get:
  
  #
  # list presently running queries
  #
  /query/running:
    get:

  #
  # list cached query results
  #
  /query/results:
    get:

  #
  # cancel a running query
  #
  /query/cancel:
    get:
  
  #
  # list analysis/input pairs ready to run
  #
  /analysis/ready:
    get:
  
  #
  # submit an analysis request to the analysis queue
  #
  /analysis/submit:
    get:
  
  #
  # show pending analysis requests
  #
  /analysis/pending:
    get:
  
  #
  # show presently running analyses
  #
  /analysis/running:
    get:
  
  #
  # show recently run analyses
  #
  /analysis/log:
    get:

  #
  # show status of analysis/query workers
  #
  /workers/list:
    get:

  #
  # manage running workers
  #
  /workers/run:
    get:

  #
  # list reviewable observation sets
  #
  /os/reviewable:
    get:

  #
  # show observation set details for review
  #
  /os/review:
    get:

  # 
  # set observation set state
  #
  /os/state:
    get:
    